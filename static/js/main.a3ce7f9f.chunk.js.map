{"version":3,"sources":["GameBoard.tsx","GameBoardRow.tsx","GameBoardCell.tsx","GameBoardControls.tsx","DigitButton.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["GameBoard","props","react","className","children","GameBoardRow","GameBoardCell","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isInitiallyEmpty","onClick","bind","assertThisInitialized","checkIfInitiallyEmpty","prevProps","prevState","value","selectedCell","erroredCell","emptyCells","nextProps","row","column","handleCellClick","event","isFinite","key","enteredNumber","Number","handleCellKeyDown","cell","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","emptyCell","JSON","stringify","err","return","setState","_this2","_this$props","sameSelectedRow","sameSelectedCell","isSelected","sameCellValue","erroredRow","erroredColumn","isErroredCell","role","onKeyDown","e","tabIndex","React","GameBoardControls","DigitButton","App","board","highlightSelected","isDuplicateValue","shouldValidateCell","toggleHighlightSelected","handleDigitClick","hasDuplicateRowValue","hasDuplicateColumnValue","hasDuplicateValueInSquare","findEmptyPositions","getInitiallySelectedCell","setErroredCell","setValueOnBoard","forEach","rowIndex","push","i","length","selectedSquareRow","Math","floor","selectedSquareColumn","j","currentSquareColumn","newBoard","map","_this3","src_GameBoard","src_GameBoardRow","concat","columnIndex","src_GameBoardCell","src_GameBoardControls","Array","from","keys","digit","src_DigitButton","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","src_App_0","document","getElementById","URL","process","toString","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a3ce7f9f.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst GameBoard: React.StatelessComponent<{}> = props => (\r\n  <div className=\"GameBoard-Wrapper\">\r\n    <div className=\"GameBoard\">{props.children}</div>\r\n  </div>\r\n);\r\n\r\nexport default GameBoard;\r\n","import * as React from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst GameBoardRow: React.StatelessComponent<{}> = props => (\r\n  <div className=\"GameBoard-Row-Wrapper\">\r\n    <div className=\"GameBoard-Row\">{props.children}</div>\r\n  </div>\r\n);\r\n\r\nexport default GameBoardRow;\r\n","import * as React from \"react\";\r\nimport \"./App.css\";\r\n\r\ninterface Props {\r\n  column: number;\r\n  row: number;\r\n  handleCellClick: (selectedCell: SelectedCell) => void;\r\n  selectedCell: SelectedCell;\r\n  value: number;\r\n  handleCellKeyDown: (value: number) => void;\r\n  emptyCells: number[][];\r\n  erroredCell: ErroredCell;\r\n}\r\n\r\ninterface State {\r\n  isInitiallyEmpty: boolean;\r\n}\r\n\r\ninterface SelectedCell {\r\n  row?: number;\r\n  column?: number;\r\n  value?: number;\r\n}\r\n\r\ninterface ErroredCell {\r\n  row?: number;\r\n  column?: number;\r\n}\r\n\r\nclass GameBoardCell extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isInitiallyEmpty: false\r\n    };\r\n\r\n    this.onClick = this.onClick.bind(this);\r\n    this.checkIfInitiallyEmpty = this.checkIfInitiallyEmpty.bind(this);\r\n  }\r\n\r\n  public shouldComponentUpdate(prevProps: Props, prevState: State): boolean {\r\n    if (\r\n      this.props.value !== prevProps.value ||\r\n      this.props.selectedCell !== prevProps.selectedCell ||\r\n      this.state.isInitiallyEmpty !== prevState.isInitiallyEmpty ||\r\n      this.props.erroredCell !== prevProps.erroredCell ||\r\n      this.props.emptyCells !== prevProps.emptyCells\r\n    ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public componentDidUpdate(nextProps: Props): void {\r\n    if (this.props.emptyCells !== nextProps.emptyCells) {\r\n      this.checkIfInitiallyEmpty([this.props.row, this.props.column]);\r\n    }\r\n  }\r\n\r\n  public onClick(): void {\r\n    const selectedCell: SelectedCell = {\r\n      column: this.props.column,\r\n      row: this.props.row,\r\n      value: this.props.value\r\n    };\r\n    this.props.handleCellClick(selectedCell);\r\n  }\r\n\r\n  public onKeyDown(event: any): void {\r\n    const isNumber = isFinite(event.key);\r\n    if (isNumber && !this.state.isInitiallyEmpty) {\r\n      const enteredNumber: number = Number(event.key);\r\n      this.props.handleCellKeyDown(enteredNumber);\r\n    }\r\n  }\r\n\r\n  public checkIfInitiallyEmpty(cell: Array<number | undefined>): void {\r\n    let isInitiallyEmpty = false;\r\n    for (const emptyCell of this.props.emptyCells) {\r\n      // stringify to compare zeroes as strings\r\n      if (JSON.stringify(emptyCell) === JSON.stringify(cell)) {\r\n        isInitiallyEmpty = true;\r\n        break;\r\n      }\r\n    }\r\n    this.setState({ isInitiallyEmpty });\r\n  }\r\n\r\n  public render() {\r\n    const { selectedCell, erroredCell } = this.props;\r\n    const sameSelectedRow: boolean = selectedCell.row === this.props.row;\r\n    const sameSelectedCell: boolean = selectedCell.column === this.props.column;\r\n    const isSelected: boolean = sameSelectedRow && sameSelectedCell;\r\n    const sameCellValue: boolean = selectedCell.value === this.props.value;\r\n    const erroredRow = erroredCell.row;\r\n    const erroredColumn = erroredCell.column;\r\n    const isErroredCell =\r\n      this.props.row === erroredRow && this.props.column === erroredColumn;\r\n\r\n    let className: string = \"GameBoard-Cell-Wrapper\";\r\n\r\n    if ((this.props.value && sameCellValue) || isSelected) {\r\n      className += \" selected-primary\";\r\n    }\r\n\r\n    if (!this.state.isInitiallyEmpty) {\r\n      className += \" initially-filled\";\r\n    }\r\n\r\n    if (isErroredCell) {\r\n      className += \" errored\";\r\n    }\r\n\r\n    return (\r\n      <div\r\n        role=\"button\"\r\n        className={className}\r\n        onClick={this.onClick}\r\n        onKeyDown={\r\n          isSelected && !this.state.isInitiallyEmpty\r\n            ? e => {\r\n                this.onKeyDown(e);\r\n              }\r\n            : undefined\r\n        }\r\n        tabIndex={0}\r\n      >\r\n        <div className=\"GameBoard-Cell\">\r\n          {this.props.value !== 0 && <span>{this.props.value}</span>}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameBoardCell;\r\n","import * as React from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst GameBoardControls: React.StatelessComponent<{}> = props => (\r\n  <div className=\"GameBoard-Controls-Wrapper\">\r\n    <div className=\"GameBoard-Controls\">{props.children}</div>\r\n  </div>\r\n);\r\n\r\nexport default GameBoardControls;\r\n","import * as React from \"react\";\r\nimport \"./App.css\";\r\n\r\ninterface Props {\r\n  value: number;\r\n  onClick: (value: number) => void;\r\n}\r\n\r\nclass DigitButton extends React.Component<Props, {}> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.onClick = this.onClick.bind(this);\r\n  }\r\n\r\n  public onClick() {\r\n    this.props.onClick(this.props.value);\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className=\"GameBoard-Controls-Digit-Wrapper\" onClick={this.onClick}>\r\n        <div className=\"GameBoard-Controls-Digit\">\r\n          <span>{this.props.value}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DigitButton;\r\n","import * as React from \"react\";\nimport \"./App.css\";\nimport GameBoard from \"./GameBoard\";\nimport GameBoardRow from \"./GameBoardRow\";\nimport GameBoardCell from \"./GameBoardCell\";\nimport GameBoardControls from \"./GameBoardControls\";\nimport DigitButton from \"./DigitButton\";\n\ninterface State {\n  board: number[][];\n  emptyCells: number[][];\n  erroredCell: ErroredCell;\n  highlightSelected: boolean;\n  selectedCell: SelectedCell;\n  shouldValidateCell: boolean;\n  isDuplicateValue: boolean;\n}\n\ninterface SelectedCell {\n  row: number;\n  column: number;\n  value?: number;\n}\n\ninterface ErroredCell {\n  row?: number;\n  column?: number;\n}\n\nclass App extends React.Component<{}, State> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      board: [\n        [0, 9, 0, 0, 0, 0, 0, 0, 6],\n        [0, 0, 0, 9, 6, 0, 4, 8, 5],\n        [0, 0, 0, 5, 8, 1, 0, 0, 0],\n        [0, 0, 4, 0, 0, 0, 0, 0, 0],\n        [5, 1, 7, 2, 0, 0, 9, 0, 0],\n        [6, 0, 2, 0, 0, 0, 3, 7, 0],\n        [1, 0, 0, 8, 0, 4, 0, 2, 0],\n        [7, 0, 6, 0, 0, 0, 8, 1, 0],\n        [3, 0, 0, 0, 9, 0, 0, 0, 0]\n      ],\n      emptyCells: [],\n      erroredCell: {},\n      highlightSelected: true,\n      isDuplicateValue: false,\n      selectedCell: {\n        column: 0,\n        row: 0\n      },\n      shouldValidateCell: true\n    };\n\n    this.handleCellClick = this.handleCellClick.bind(this);\n    this.toggleHighlightSelected = this.toggleHighlightSelected.bind(this);\n    this.handleCellKeyDown = this.handleCellKeyDown.bind(this);\n    this.handleDigitClick = this.handleDigitClick.bind(this);\n    this.isDuplicateValue = this.isDuplicateValue.bind(this);\n    this.hasDuplicateRowValue = this.hasDuplicateRowValue.bind(this);\n    this.hasDuplicateColumnValue = this.hasDuplicateColumnValue.bind(this);\n    this.hasDuplicateValueInSquare = this.hasDuplicateValueInSquare.bind(this);\n    this.findEmptyPositions = this.findEmptyPositions.bind(this);\n    this.getInitiallySelectedCell = this.getInitiallySelectedCell.bind(this);\n    this.setErroredCell = this.setErroredCell.bind(this);\n    this.setValueOnBoard = this.setValueOnBoard.bind(this);\n  }\n\n  public componentDidMount() {\n    this.findEmptyPositions();\n    this.getInitiallySelectedCell();\n  }\n\n  public findEmptyPositions(): void {\n    const emptyCells: State[\"board\"] = [];\n    this.state.board.forEach((row, rowIndex) => {\n      row.forEach((cell, column) => {\n        if (cell === 0) {\n          emptyCells.push([rowIndex, column]);\n        }\n      });\n    });\n    this.setState({ emptyCells });\n  }\n\n  public getInitiallySelectedCell(): void {\n    this.setState(state => ({\n      selectedCell: {\n        column: 0,\n        row: 0,\n        value: state.board[0][0]\n      }\n    }));\n  }\n\n  public handleCellClick(selectedCell: SelectedCell): void {\n    this.setState({ selectedCell, erroredCell: {} });\n  }\n\n  public toggleHighlightSelected(): void {\n    this.setState(state => ({\n      highlightSelected: !state.highlightSelected\n    }));\n  }\n\n  public handleCellKeyDown(value: number): void {\n    this.setValueOnBoard(value);\n  }\n\n  public isDuplicateValue(value: number): boolean {\n    if (\n      this.hasDuplicateValueInSquare(value) ||\n      this.hasDuplicateColumnValue(value) ||\n      this.hasDuplicateRowValue(value)\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  public hasDuplicateRowValue(value: number): boolean {\n    const { selectedCell } = this.state;\n    let hasDuplicateRowValue: boolean = false;\n    for (let i = 0; i < this.state.board[selectedCell.row].length; i++) {\n      if (this.state.board[selectedCell.row][i] === value) {\n        hasDuplicateRowValue = true;\n        this.setErroredCell({ column: i, row: selectedCell.row });\n        break;\n      }\n    }\n    return hasDuplicateRowValue;\n  }\n\n  public hasDuplicateColumnValue(value: number): boolean {\n    const { selectedCell } = this.state;\n    let hasDuplicateColumnValue: boolean = false;\n    for (let i = 0; i < this.state.board.length; i++) {\n      if (this.state.board[i][selectedCell.column] === value) {\n        hasDuplicateColumnValue = true;\n        this.setErroredCell({ column: selectedCell.column, row: i });\n        break;\n      }\n    }\n    return hasDuplicateColumnValue;\n  }\n\n  public hasDuplicateValueInSquare(value: number): boolean {\n    const { selectedCell } = this.state;\n    const selectedSquareRow = Math.floor(selectedCell.row / 3);\n    const selectedSquareColumn = Math.floor(selectedCell.column / 3);\n    let hasDuplicateValueInSquare = false;\n    for (let i = 0; i < this.state.board.length; i++) {\n      const currentSquareRow = Math.floor(i / 3);\n      if (currentSquareRow === selectedSquareRow) {\n        const row = this.state.board[i];\n        for (let j = 0; j < row.length; j++) {\n          const currentSquareColumn = Math.floor(j / 3);\n          const cell = row[j];\n          if (currentSquareColumn === selectedSquareColumn && cell === value) {\n            hasDuplicateValueInSquare = true;\n            this.setErroredCell({ column: j, row: i });\n            break;\n          }\n        }\n        if (hasDuplicateValueInSquare) {\n          break;\n        }\n      }\n    }\n    return hasDuplicateValueInSquare;\n  }\n\n  public setErroredCell(erroredCell: ErroredCell): void {\n    this.setState({ erroredCell });\n  }\n\n  public handleDigitClick(value: number): void {\n    if (\n      (this.state.shouldValidateCell && !this.isDuplicateValue(value)) ||\n      !this.state.shouldValidateCell\n    ) {\n      this.setValueOnBoard(value);\n    }\n  }\n\n  public setValueOnBoard(value: number): void {\n    const newBoard: State[\"board\"] = this.state.board.map((row, i, board) => {\n      if (i === this.state.selectedCell.row) {\n        return board[i].map((column, j) => {\n          if (j === this.state.selectedCell.column) {\n            return value;\n          }\n          return column;\n        });\n      }\n      return row;\n    });\n    this.setState({ board: newBoard });\n  }\n\n  public render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-Title-Wrapper\">\n          <h1 className=\"App-Title\">Sudoku</h1>\n        </div>\n        <GameBoard>\n          {this.state.board.map((row, rowIndex) => (\n            <GameBoardRow key={`row-${rowIndex}`}>\n              {row.map((value, columnIndex) => (\n                <GameBoardCell\n                  key={`cell-${columnIndex}`}\n                  column={columnIndex}\n                  value={value}\n                  row={rowIndex}\n                  handleCellClick={this.handleCellClick}\n                  selectedCell={this.state.selectedCell}\n                  handleCellKeyDown={this.handleCellKeyDown}\n                  emptyCells={this.state.emptyCells}\n                  erroredCell={this.state.erroredCell}\n                />\n              ))}\n            </GameBoardRow>\n          ))}\n        </GameBoard>\n        <GameBoardControls>\n          <div className=\"GameBoard-Controls-Digits-Wrapper\">\n            <div className=\"GameBoard-Controls-Digits\">\n              {Array.from(Array(9).keys(), digit => (\n                <DigitButton\n                  key={`digit-${digit}`}\n                  value={digit + 1}\n                  onClick={this.handleDigitClick}\n                />\n              ))}\n            </div>\n          </div>\n        </GameBoardControls>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport './normalize.css';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}